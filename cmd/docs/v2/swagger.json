{
    "swagger": "2.0",
    "info": {
        "description": "API documentation for LeaseEase.",
        "title": "LeaseEase API",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support",
            "email": "support@example.com"
        },
        "version": "2.0"
    },
    "host": "localhost:5000/api/v2",
    "basePath": "/",
    "paths": {
        "/auth/check": {
            "get": {
                "description": "Validates JWT token and returns authentication status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Check authentication status",
                "operationId": "3",
                "responses": {
                    "200": {
                        "description": "User is authenticated",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and set an authentication cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login an existing user",
                "operationId": "2",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LoginDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User login successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Clear the authentication cookie to logout the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout an existing user",
                "responses": {
                    "201": {
                        "description": "User logout successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "operationId": "1",
                "parameters": [
                    {
                        "description": "Register request payload",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RegisterDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully\"  example({\"staus_code\": 201, \"message\": \"User registered successfully\", \"data\": nil})",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/auth/request-otp": {
            "post": {
                "description": "Sends a one-time password (OTP) to the user's contact information provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Request OTP for authentication",
                "parameters": [
                    {
                        "description": "Request payload containing user identifier",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.RequestOTPDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OTP sent successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {}
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request - Unable to parse request body",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to process OTP request",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/auth/verify-otp": {
            "post": {
                "description": "Validates the OTP provided by the user for authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Verify provided OTP",
                "parameters": [
                    {
                        "description": "Request payload containing OTP and user identifier",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.VerifyOTPDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP verification successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/utils.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {}
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid OTP payload or incorrect OTP",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to verify OTP",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/properties/autocomplete": {
            "get": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Retrieve property suggestions based on a partial search query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Auto complete property search",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Partial property name",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Properties retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/properties/create": {
            "post": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Create a new property",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Create a property",
                "parameters": [
                    {
                        "description": "Property Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.PropertyDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Property created successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/properties/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Delete a property by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Delete a property",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property deleted successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/properties/get": {
            "get": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Retrieve list of all properties with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Get all properties",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Page size",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Properties retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/utils.Response"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/dtos.GetPropertyDTO"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/properties/get/{id}": {
            "get": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Retrieve property details by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Get property by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/utils.Response"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "$ref": "#/definitions/dtos.GetPropertyDTO"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/properties/search": {
            "get": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Search properties using query parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Search properties",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "pagesize",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Property name keyword",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum price",
                        "name": "minprice",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum price",
                        "name": "maxprice",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum size",
                        "name": "minsize",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum size",
                        "name": "maxsize",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order field (price or size)",
                        "name": "sortby",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order direction (asc or desc)",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Availability status",
                        "name": "availability",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Properties retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/utils.Response"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "data": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/definitions/dtos.GetPropertyDTO"
                                                }
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/properties/update/{id}": {
            "put": {
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "description": "Update existing property data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Property"
                ],
                "summary": "Update a property",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Property ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated property data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.PropertyDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Property updated successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "404": {
                        "description": "Property not found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/utils.Response"
                            }
                        }
                    }
                }
            }
        },
        "/reservation/create": {
            "post": {
                "description": "Parses the reservation body and creates a new lease reservation using the lessee ID from the JWT token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservation"
                ],
                "summary": "Create a New Lease Reservation",
                "parameters": [
                    {
                        "description": "Lease Reservation Data",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateReservation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Reservation created successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to parse reservation body",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/reservations/delete/{id}": {
            "delete": {
                "description": "Deletes a lease reservation using the reservation ID provided in the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservation"
                ],
                "summary": "Delete a Lease Reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reservation deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/reservations/update/{id}": {
            "put": {
                "description": "Parses the reservation body and updates an existing lease reservation identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservation"
                ],
                "summary": "Update an Existing Lease Reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Lease Reservation Update Data",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateReservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reservation updated successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to parse reservation body or invalid reservation ID",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        },
        "/reservations/{id}": {
            "put": {
                "description": "Approves a lease reservation using the reservation ID provided in the URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reservation"
                ],
                "summary": "Approve a Lease Reservation",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Reservation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reservation Status",
                        "name": "reservation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ApproveReservation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reservation approved successfully",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid reservation ID",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "404": {
                        "description": "Reservation not found",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/utils.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.ApproveReservation": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "approved"
                }
            }
        },
        "dtos.CreateReservation": {
            "type": "object",
            "properties": {
                "interestedProperty": {
                    "type": "integer",
                    "example": 1
                },
                "lesseeID": {
                    "type": "integer",
                    "example": 1
                },
                "proposedMessage": {
                    "type": "string",
                    "example": "I am very interested in leasing this property."
                },
                "purpose": {
                    "type": "string",
                    "example": "Lease agreement for residential property"
                },
                "question": {
                    "type": "string",
                    "example": "Could you provide more details about the lease duration?"
                }
            }
        },
        "dtos.GetPropertyDTO": {
            "description": "GetPropertyDTO represents the details of a property along with identifier information.",
            "type": "object",
            "properties": {
                "availability_status": {
                    "description": "property's availability status",
                    "type": "string",
                    "example": "available"
                },
                "date": {
                    "description": "Property creation date",
                    "type": "string",
                    "example": "2024-02-15T10:00:00Z"
                },
                "id": {
                    "description": "Property ID",
                    "type": "integer",
                    "example": 1
                },
                "lessor_id": {
                    "description": "Lessor ID",
                    "type": "integer",
                    "example": 10
                },
                "location": {
                    "description": "property's location",
                    "type": "string",
                    "example": "California"
                },
                "name": {
                    "description": "name of the property",
                    "type": "string",
                    "example": "Sunset Villa"
                },
                "price": {
                    "description": "property's price",
                    "type": "number",
                    "example": 1200000.5
                },
                "rating": {
                    "description": "Average rating",
                    "type": "number",
                    "example": 4.5
                },
                "review_count": {
                    "description": "Number of reviews",
                    "type": "integer",
                    "example": 12
                },
                "review_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "size": {
                    "description": "property's size",
                    "type": "string",
                    "example": "3500 sqft"
                }
            }
        },
        "dtos.LoginDTO": {
            "description": "LoginDTO represents a request for user login.",
            "type": "object",
            "properties": {
                "email": {
                    "description": "user's email",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "description": "user's password",
                    "type": "string",
                    "example": "strongPassword123"
                }
            }
        },
        "dtos.PropertyDTO": {
            "description": "PropertyDTO represents a property.",
            "type": "object",
            "properties": {
                "location": {
                    "description": "property location",
                    "type": "string",
                    "example": "California"
                },
                "name": {
                    "description": "name of the property",
                    "type": "string",
                    "example": "Sunset Villa"
                },
                "price": {
                    "description": "property price",
                    "type": "number",
                    "example": 1200000.5
                },
                "size": {
                    "description": "property size",
                    "type": "string",
                    "example": "3500 sqft"
                },
                "status": {
                    "description": "availability status",
                    "type": "string",
                    "example": "available"
                }
            }
        },
        "dtos.RegisterDTO": {
            "description": "RegisterDTO represents a request for user registration.",
            "type": "object",
            "properties": {
                "address": {
                    "description": "user's address",
                    "type": "string",
                    "example": "1234 Main St, Springfield"
                },
                "email": {
                    "description": "user's email",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "name": {
                    "description": "user's first name",
                    "type": "string",
                    "example": "John"
                },
                "password": {
                    "description": "user's password",
                    "type": "string",
                    "example": "strongPassword123"
                },
                "role": {
                    "description": "role: lessor, lessee",
                    "type": "string",
                    "example": "lessee"
                }
            }
        },
        "dtos.RequestOTPDTO": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "user's email",
                    "type": "string",
                    "example": "john.doe@example.com"
                }
            }
        },
        "dtos.UpdateReservation": {
            "type": "object",
            "properties": {
                "proposedMessage": {
                    "type": "string",
                    "example": "I would like to update my earlier message."
                },
                "purpose": {
                    "type": "string",
                    "example": "Updated lease purpose"
                },
                "question": {
                    "type": "string",
                    "example": "Is there any flexibility in the lease terms?"
                }
            }
        },
        "dtos.VerifyOTPDTO": {
            "type": "object",
            "required": [
                "email",
                "otp"
            ],
            "properties": {
                "email": {
                    "description": "user's email",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "otp": {
                    "description": "user's OTP",
                    "type": "string",
                    "example": "123456"
                }
            }
        },
        "utils.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string",
                    "example": "message"
                },
                "status_code": {
                    "type": "integer",
                    "example": 888
                }
            }
        }
    }
}