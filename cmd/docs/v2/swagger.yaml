basePath: /
definitions:
  dtos.CreateRequest:
    properties:
      interestedProperty:
        example: 1
        type: integer
      lesseeID:
        example: 1
        type: integer
      proposedMessage:
        example: I am very interested in leasing this property.
        type: string
      purpose:
        example: Lease agreement for residential property
        type: string
      question:
        example: Could you provide more details about the lease duration?
        type: string
    type: object
  dtos.GetPropertyDTO:
    description: GetPropertyDTO represents the details of a property along with identifier
      information.
    properties:
      availability_status:
        description: property's availability status
        example: available
        type: string
      id:
        description: Property ID
        example: 1
        type: integer
      lessor_id:
        description: Lessor ID
        example: 10
        type: integer
      location:
        description: property's location
        example: California
        type: string
      name:
        description: name of the property
        example: Sunset Villa
        type: string
      price:
        description: property's price
        example: 1.2000005e+06
        type: number
      size:
        description: property's size
        example: 3500 sqft
        type: string
    type: object
  dtos.LoginDTO:
    description: LoginDTO represents a request for user login.
    properties:
      email:
        description: user's email
        example: john.doe@example.com
        type: string
      password:
        description: user's password
        example: strongPassword123
        type: string
    type: object
  dtos.PropertyDTO:
    description: PropertyDTO represents a property.
    properties:
      location:
        description: property location
        example: California
        type: string
      name:
        description: name of the property
        example: Sunset Villa
        type: string
      price:
        description: property price
        example: 1.2000005e+06
        type: number
      size:
        description: property size
        example: 3500 sqft
        type: string
      status:
        description: availability status
        example: available
        type: string
    type: object
  dtos.RegisterDTO:
    description: RegisterDTO represents a request for user registration.
    properties:
      address:
        description: user's address
        example: 1234 Main St, Springfield
        type: string
      email:
        description: user's email
        example: john.doe@example.com
        type: string
      name:
        description: user's first name
        example: John
        type: string
      password:
        description: user's password
        example: strongPassword123
        type: string
      role:
        description: 'role: lessor, lessee'
        example: lessee
        type: string
    type: object
  dtos.UpdateRequest:
    properties:
      proposedMessage:
        example: I would like to update my earlier message.
        type: string
      purpose:
        example: Updated lease purpose
        type: string
      question:
        example: Is there any flexibility in the lease terms?
        type: string
    type: object
  utils.Response:
    properties:
      data: {}
      message:
        example: message
        type: string
      status_code:
        example: 888
        type: integer
    type: object
host: localhost:5000/api/v2
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: API documentation for LeaseEase.
  title: LeaseEase API
  version: "2.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and set an authentication cookie.
      operationId: "2"
      parameters:
      - description: Login request payload
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User login successfully
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "400":
          description: Invalid request payload
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "500":
          description: Internal server error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      summary: Login an existing user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with the provided details.
      operationId: "1"
      parameters:
      - description: Register request payload
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dtos.RegisterDTO'
      produces:
      - application/json
      responses:
        "201":
          description: 'User registered successfully"  example({"staus_code": 201,
            "message": "User registered successfully", "data": nil})'
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request payload
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "500":
          description: Internal server error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      summary: Register a new user
      tags:
      - auth
  /properties/autocomplete:
    get:
      consumes:
      - application/json
      description: Retrieve property suggestions based on a partial search query
      parameters:
      - description: Partial property name
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Properties retrieved successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - cookieAuth: []
      summary: Auto complete property search
      tags:
      - Property
  /properties/create:
    post:
      consumes:
      - application/json
      description: Create a new property
      parameters:
      - description: Property Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.PropertyDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Property created successfully
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      security:
      - cookieAuth: []
      summary: Create a property
      tags:
      - Property
  /properties/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a property by ID
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Property deleted successfully
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "404":
          description: Property not found
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      security:
      - cookieAuth: []
      summary: Delete a property
      tags:
      - Property
  /properties/get:
    get:
      consumes:
      - application/json
      description: Retrieve list of all properties with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Properties retrieved successfully
          schema:
            items:
              allOf:
              - $ref: '#/definitions/utils.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/dtos.GetPropertyDTO'
                    type: array
                type: object
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      security:
      - cookieAuth: []
      summary: Get all properties
      tags:
      - Property
  /properties/get/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve property details by its ID
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Property retrieved successfully
          schema:
            items:
              allOf:
              - $ref: '#/definitions/utils.Response'
              - properties:
                  data:
                    $ref: '#/definitions/dtos.GetPropertyDTO'
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "404":
          description: Not Found
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      security:
      - cookieAuth: []
      summary: Get property by ID
      tags:
      - Property
  /properties/search:
    get:
      consumes:
      - application/json
      description: Search properties using query parameters
      parameters:
      - description: Page number
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: pagesize
        required: true
        type: integer
      - description: Property name keyword
        in: query
        name: name
        type: string
      - description: Minimum price
        in: query
        name: minprice
        type: number
      - description: Maximum price
        in: query
        name: maxprice
        type: number
      - description: Minimum size
        in: query
        name: minsize
        type: number
      - description: Maximum size
        in: query
        name: maxsize
        type: number
      - description: Order field (price or size)
        in: query
        name: sortby
        type: string
      - description: Order direction (asc or desc)
        in: query
        name: order
        type: string
      - description: Availability status
        in: query
        name: availability
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Properties retrieved successfully
          schema:
            items:
              allOf:
              - $ref: '#/definitions/utils.Response'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/dtos.GetPropertyDTO'
                    type: array
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      security:
      - cookieAuth: []
      summary: Search properties
      tags:
      - Property
  /properties/update/{id}:
    put:
      consumes:
      - application/json
      description: Update existing property data
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated property data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.PropertyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Property updated successfully
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "404":
          description: Property not found
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/utils.Response'
            type: array
      security:
      - cookieAuth: []
      summary: Update a property
      tags:
      - Property
  /request/create:
    post:
      consumes:
      - application/json
      description: Parses the request body and creates a new lease request using the
        lessee ID from the JWT token.
      parameters:
      - description: Lease Request Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Request created successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Failed to parse request body
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Create a New Lease Request
      tags:
      - Request
  /requests/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a lease request using the request ID provided in the URL.
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Request deleted successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Invalid request ID
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Request not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Delete a Lease Request
      tags:
      - Request
  /requests/update/{id}:
    put:
      consumes:
      - application/json
      description: Parses the request body and updates an existing lease request identified
        by its ID.
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: integer
      - description: Lease Request Update Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Request updated successfully
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Failed to parse request body or invalid request ID
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Request not found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Update an Existing Lease Request
      tags:
      - Request
swagger: "2.0"
