// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	dtos "LeaseEase/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// LesseeService is an autogenerated mock type for the LesseeService type
type LesseeService struct {
	mock.Mock
}

// CreateReservation provides a mock function with given fields: reservationDTO, lesseeID
func (_m *LesseeService) CreateReservation(reservationDTO *dtos.CreateReservationDTO, lesseeID uint) (*dtos.ReservationResponseDTO, error) {
	ret := _m.Called(reservationDTO, lesseeID)

	if len(ret) == 0 {
		panic("no return value specified for CreateReservation")
	}

	var r0 *dtos.ReservationResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.CreateReservationDTO, uint) (*dtos.ReservationResponseDTO, error)); ok {
		return rf(reservationDTO, lesseeID)
	}
	if rf, ok := ret.Get(0).(func(*dtos.CreateReservationDTO, uint) *dtos.ReservationResponseDTO); ok {
		r0 = rf(reservationDTO, lesseeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ReservationResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.CreateReservationDTO, uint) error); ok {
		r1 = rf(reservationDTO, lesseeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReservation provides a mock function with given fields: reservationID, lesseeID
func (_m *LesseeService) DeleteReservation(reservationID uint, lesseeID uint) (*dtos.ReservationResponseDTO, error) {
	ret := _m.Called(reservationID, lesseeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReservation")
	}

	var r0 *dtos.ReservationResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*dtos.ReservationResponseDTO, error)); ok {
		return rf(reservationID, lesseeID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *dtos.ReservationResponseDTO); ok {
		r0 = rf(reservationID, lesseeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ReservationResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(reservationID, lesseeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationsByLesseeID provides a mock function with given fields: lesseeID, limit, offset
func (_m *LesseeService) GetReservationsByLesseeID(lesseeID uint, limit int, offset int) ([]dtos.GetReservationDTO, error) {
	ret := _m.Called(lesseeID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationsByLesseeID")
	}

	var r0 []dtos.GetReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]dtos.GetReservationDTO, error)); ok {
		return rf(lesseeID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []dtos.GetReservationDTO); ok {
		r0 = rf(lesseeID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.GetReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(lesseeID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReservation provides a mock function with given fields: reservationDTO, reservationID, lesseeID
func (_m *LesseeService) UpdateReservation(reservationDTO *dtos.UpdateReservationDTO, reservationID uint, lesseeID uint) (*dtos.ReservationResponseDTO, error) {
	ret := _m.Called(reservationDTO, reservationID, lesseeID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReservation")
	}

	var r0 *dtos.ReservationResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.UpdateReservationDTO, uint, uint) (*dtos.ReservationResponseDTO, error)); ok {
		return rf(reservationDTO, reservationID, lesseeID)
	}
	if rf, ok := ret.Get(0).(func(*dtos.UpdateReservationDTO, uint, uint) *dtos.ReservationResponseDTO); ok {
		r0 = rf(reservationDTO, reservationID, lesseeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ReservationResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*dtos.UpdateReservationDTO, uint, uint) error); ok {
		r1 = rf(reservationDTO, reservationID, lesseeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLesseeService creates a new instance of LesseeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLesseeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LesseeService {
	mock := &LesseeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
