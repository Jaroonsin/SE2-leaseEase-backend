// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	dtos "LeaseEase/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// PropertyService is an autogenerated mock type for the PropertyService type
type PropertyService struct {
	mock.Mock
}

// AutoComplete provides a mock function with given fields: query
func (_m *PropertyService) AutoComplete(query string) ([]string, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for AutoComplete")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProperty provides a mock function with given fields: propertyDTO, lessorID
func (_m *PropertyService) CreateProperty(propertyDTO *dtos.PropertyDTO, lessorID uint) (uint, error) {
	ret := _m.Called(propertyDTO, lessorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateProperty")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.PropertyDTO, uint) (uint, error)); ok {
		return rf(propertyDTO, lessorID)
	}
	if rf, ok := ret.Get(0).(func(*dtos.PropertyDTO, uint) uint); ok {
		r0 = rf(propertyDTO, lessorID)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*dtos.PropertyDTO, uint) error); ok {
		r1 = rf(propertyDTO, lessorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProperty provides a mock function with given fields: propertyID
func (_m *PropertyService) DeleteProperty(propertyID uint) error {
	ret := _m.Called(propertyID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(propertyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProperty provides a mock function with given fields: lessorID, page, pageSize
func (_m *PropertyService) GetAllProperty(lessorID uint, page int, pageSize int) (*dtos.GetPropertyPaginatedDTO, error) {
	ret := _m.Called(lessorID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProperty")
	}

	var r0 *dtos.GetPropertyPaginatedDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) (*dtos.GetPropertyPaginatedDTO, error)); ok {
		return rf(lessorID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) *dtos.GetPropertyPaginatedDTO); ok {
		r0 = rf(lessorID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GetPropertyPaginatedDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(lessorID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertyByID provides a mock function with given fields: propertyID
func (_m *PropertyService) GetPropertyByID(propertyID uint) (*dtos.GetPropertyDTO, error) {
	ret := _m.Called(propertyID)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertyByID")
	}

	var r0 *dtos.GetPropertyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*dtos.GetPropertyDTO, error)); ok {
		return rf(propertyID)
	}
	if rf, ok := ret.Get(0).(func(uint) *dtos.GetPropertyDTO); ok {
		r0 = rf(propertyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GetPropertyDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(propertyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProperty provides a mock function with given fields: query
func (_m *PropertyService) SearchProperty(query map[string]string) (dtos.SearchPropertyDTO, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for SearchProperty")
	}

	var r0 dtos.SearchPropertyDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]string) (dtos.SearchPropertyDTO, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(map[string]string) dtos.SearchPropertyDTO); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(dtos.SearchPropertyDTO)
	}

	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProperty provides a mock function with given fields: propertyDTO, propertyID
func (_m *PropertyService) UpdateProperty(propertyDTO *dtos.PropertyDTO, propertyID uint) error {
	ret := _m.Called(propertyDTO, propertyID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProperty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.PropertyDTO, uint) error); ok {
		r0 = rf(propertyDTO, propertyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPropertyService creates a new instance of PropertyService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPropertyService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PropertyService {
	mock := &PropertyService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
