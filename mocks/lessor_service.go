// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	dtos "LeaseEase/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// LessorService is an autogenerated mock type for the LessorService type
type LessorService struct {
	mock.Mock
}

// AcceptReservation provides a mock function with given fields: reservationID, lessorID
func (_m *LessorService) AcceptReservation(reservationID uint, lessorID uint) (*dtos.ReservationResponseDTO, error) {
	ret := _m.Called(reservationID, lessorID)

	if len(ret) == 0 {
		panic("no return value specified for AcceptReservation")
	}

	var r0 *dtos.ReservationResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*dtos.ReservationResponseDTO, error)); ok {
		return rf(reservationID, lessorID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *dtos.ReservationResponseDTO); ok {
		r0 = rf(reservationID, lessorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ReservationResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(reservationID, lessorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeclineReservation provides a mock function with given fields: reservationID, lessorID
func (_m *LessorService) DeclineReservation(reservationID uint, lessorID uint) (*dtos.ReservationResponseDTO, error) {
	ret := _m.Called(reservationID, lessorID)

	if len(ret) == 0 {
		panic("no return value specified for DeclineReservation")
	}

	var r0 *dtos.ReservationResponseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*dtos.ReservationResponseDTO, error)); ok {
		return rf(reservationID, lessorID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *dtos.ReservationResponseDTO); ok {
		r0 = rf(reservationID, lessorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.ReservationResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(reservationID, lessorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservationsByPropertyID provides a mock function with given fields: propertyID, page, pageSize
func (_m *LessorService) GetReservationsByPropertyID(propertyID uint, page int, pageSize int) ([]dtos.GetPropReservationDTO, error) {
	ret := _m.Called(propertyID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetReservationsByPropertyID")
	}

	var r0 []dtos.GetPropReservationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) ([]dtos.GetPropReservationDTO, error)); ok {
		return rf(propertyID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) []dtos.GetPropReservationDTO); ok {
		r0 = rf(propertyID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dtos.GetPropReservationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(propertyID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLessorService creates a new instance of LessorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLessorService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LessorService {
	mock := &LessorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
