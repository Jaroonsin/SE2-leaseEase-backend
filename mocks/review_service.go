// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	dtos "LeaseEase/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// ReviewService is an autogenerated mock type for the ReviewService type
type ReviewService struct {
	mock.Mock
}

// CreateReview provides a mock function with given fields: dto, lesseeID
func (_m *ReviewService) CreateReview(dto *dtos.CreateReviewDTO, lesseeID uint) error {
	ret := _m.Called(dto, lesseeID)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.CreateReviewDTO, uint) error); ok {
		r0 = rf(dto, lesseeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReview provides a mock function with given fields: reviewID, lesseeID
func (_m *ReviewService) DeleteReview(reviewID uint, lesseeID uint) error {
	ret := _m.Called(reviewID, lesseeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(reviewID, lesseeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllReviews provides a mock function with given fields: propertyID, page, pageSize
func (_m *ReviewService) GetAllReviews(propertyID uint, page int, pageSize int) (*dtos.GetReviewPaginatedDTO, error) {
	ret := _m.Called(propertyID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetAllReviews")
	}

	var r0 *dtos.GetReviewPaginatedDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, int, int) (*dtos.GetReviewPaginatedDTO, error)); ok {
		return rf(propertyID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint, int, int) *dtos.GetReviewPaginatedDTO); ok {
		r0 = rf(propertyID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GetReviewPaginatedDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, int, int) error); ok {
		r1 = rf(propertyID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReview provides a mock function with given fields: reviewID, dto, lesseeID
func (_m *ReviewService) UpdateReview(reviewID uint, dto *dtos.UpdateReviewDTO, lesseeID uint) error {
	ret := _m.Called(reviewID, dto, lesseeID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, *dtos.UpdateReviewDTO, uint) error); ok {
		r0 = rf(reviewID, dto, lesseeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReviewService creates a new instance of ReviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReviewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReviewService {
	mock := &ReviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
