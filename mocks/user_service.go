// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	dtos "LeaseEase/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CheckUser provides a mock function with given fields: token
func (_m *UserService) CheckUser(token string) (*dtos.CheckUserDTO, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for CheckUser")
	}

	var r0 *dtos.CheckUserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dtos.CheckUserDTO, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *dtos.CheckUserDTO); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.CheckUserDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *UserService) GetUser(userID uint) (*dtos.GetUserDTO, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *dtos.GetUserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*dtos.GetUserDTO, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *dtos.GetUserDTO); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dtos.GetUserDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: userID, Image
func (_m *UserService) UpdateImage(userID uint, Image dtos.UpdateImageDTO) error {
	ret := _m.Called(userID, Image)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, dtos.UpdateImageDTO) error); ok {
		r0 = rf(userID, Image)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: userID, User
func (_m *UserService) UpdateUser(userID uint, User dtos.UpdateUserDTO) error {
	ret := _m.Called(userID, User)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, dtos.UpdateUserDTO) error); ok {
		r0 = rf(userID, User)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
