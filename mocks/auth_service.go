// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	dtos "LeaseEase/internal/dtos"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// Login provides a mock function with given fields: loginDTO
func (_m *AuthService) Login(loginDTO *dtos.LoginDTO) (string, error) {
	ret := _m.Called(loginDTO)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.LoginDTO) (string, error)); ok {
		return rf(loginDTO)
	}
	if rf, ok := ret.Get(0).(func(*dtos.LoginDTO) string); ok {
		r0 = rf(loginDTO)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*dtos.LoginDTO) error); ok {
		r1 = rf(loginDTO)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: registerDTO
func (_m *AuthService) Register(registerDTO *dtos.RegisterDTO) error {
	ret := _m.Called(registerDTO)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.RegisterDTO) error); ok {
		r0 = rf(registerDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestOTP provides a mock function with given fields: requestOTPDTO
func (_m *AuthService) RequestOTP(requestOTPDTO *dtos.RequestOTPDTO) error {
	ret := _m.Called(requestOTPDTO)

	if len(ret) == 0 {
		panic("no return value specified for RequestOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.RequestOTPDTO) error); ok {
		r0 = rf(requestOTPDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestPasswordReset provides a mock function with given fields: resetPassRequest
func (_m *AuthService) RequestPasswordReset(resetPassRequest *dtos.ResetPassRequestDTO) (string, error) {
	ret := _m.Called(resetPassRequest)

	if len(ret) == 0 {
		panic("no return value specified for RequestPasswordReset")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*dtos.ResetPassRequestDTO) (string, error)); ok {
		return rf(resetPassRequest)
	}
	if rf, ok := ret.Get(0).(func(*dtos.ResetPassRequestDTO) string); ok {
		r0 = rf(resetPassRequest)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*dtos.ResetPassRequestDTO) error); ok {
		r1 = rf(resetPassRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: resetPassDTO
func (_m *AuthService) ResetPassword(resetPassDTO *dtos.ResetPassDTO) error {
	ret := _m.Called(resetPassDTO)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.ResetPassDTO) error); ok {
		r0 = rf(resetPassDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: verifyOTPDTO
func (_m *AuthService) VerifyOTP(verifyOTPDTO *dtos.VerifyOTPDTO) error {
	ret := _m.Called(verifyOTPDTO)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dtos.VerifyOTPDTO) error); ok {
		r0 = rf(verifyOTPDTO)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
