// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	services "LeaseEase/internal/services"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Auth provides a mock function with no fields
func (_m *Service) Auth() services.AuthService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 services.AuthService
	if rf, ok := ret.Get(0).(func() services.AuthService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.AuthService)
		}
	}

	return r0
}

// Lessee provides a mock function with no fields
func (_m *Service) Lessee() services.LesseeService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lessee")
	}

	var r0 services.LesseeService
	if rf, ok := ret.Get(0).(func() services.LesseeService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.LesseeService)
		}
	}

	return r0
}

// Lessor provides a mock function with no fields
func (_m *Service) Lessor() services.LessorService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Lessor")
	}

	var r0 services.LessorService
	if rf, ok := ret.Get(0).(func() services.LessorService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.LessorService)
		}
	}

	return r0
}

// Payment provides a mock function with no fields
func (_m *Service) Payment() services.PaymentService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Payment")
	}

	var r0 services.PaymentService
	if rf, ok := ret.Get(0).(func() services.PaymentService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.PaymentService)
		}
	}

	return r0
}

// Property provides a mock function with no fields
func (_m *Service) Property() services.PropertyService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Property")
	}

	var r0 services.PropertyService
	if rf, ok := ret.Get(0).(func() services.PropertyService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.PropertyService)
		}
	}

	return r0
}

// Review provides a mock function with no fields
func (_m *Service) Review() services.ReviewService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Review")
	}

	var r0 services.ReviewService
	if rf, ok := ret.Get(0).(func() services.ReviewService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.ReviewService)
		}
	}

	return r0
}

// User provides a mock function with no fields
func (_m *Service) User() services.UserService {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 services.UserService
	if rf, ok := ret.Get(0).(func() services.UserService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(services.UserService)
		}
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
